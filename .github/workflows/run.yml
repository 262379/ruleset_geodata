name: Build geosite
on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "README.md"
      - ".github/workflows/delete-old-workflows.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "ads=https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-clash.yaml" >> $GITHUB_ENV
          echo "lan1=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml" >> $GITHUB_ENV
          echo "lan2=https://raw.githubusercontent.com/v2fly/domain-list-community/master/data/private" >> $GITHUB_ENV
          echo "networktest=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Speedtest/Speedtest.yaml" >> $GITHUB_ENV
          echo "microsoft_cn=https://rules.kr328.app/microsoft@cn.yaml" >> $GITHUB_ENV
          echo "apple_cn1=https://rules.kr328.app/apple@cn.yaml" >> $GITHUB_ENV
          echo "apple_cn2=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "google_cn1=https://rules.kr328.app/google@cn.yaml" >> $GITHUB_ENV
          echo "google_cn2=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "games_cn1=https://rules.kr328.app/category-games@cn.yaml" >> $GITHUB_ENV
          echo "games_cn2=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SteamCN/SteamCN.yaml" >> $GITHUB_ENV
          echo "proxy1=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy_Domain.yaml" >> $GITHUB_ENV
          echo "proxy2=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/geolocation-!cn.txt" >> $GITHUB_ENV
          echo "cn1=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Domain.yaml" >> $GITHUB_ENV
          echo "cn2=https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/direct.txt" >> $GITHUB_ENV
        shell: bash

      - name: Checkout codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
          repo: DustinWin/clash-geosite

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v3
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Generate ads
        run: |
          mkdir -p ./tmp ./community/mydata ./publish
          curl -sSL ${ads} | grep -Ev '#|payload:' | sed "s/- '+.//g" | sed "s/- '/full:/g" | sed "s/'$//g" | sed 's/^[[:space:]]*//g' | sed '/^\s*$/d' > ./community/mydata/ads
          curl -sSL ${ads} > ./publish/ads.yaml

      - name: Generate lan
        run: |
          curl -sSL ${lan1} | grep 'DOMAIN' | grep -v '#' | sed 's/- DOMAIN-SUFFIX,//g' | sed 's/- DOMAIN-KEYWORD,/keyword:/g' | sed 's/- DOMAIN,/full:/g' | sed 's/^[[:space:]]*//g' | sed '/^\s*$/d' > ./tmp/temp-lan.txt
          curl -sSL ${lan2} | grep -v '#' | sed '/^\s*$/d' >> ./tmp/temp-lan.txt
          sort --ignore-case -u ./tmp/temp-lan.txt > ./community/mydata/lan
          curl -sSL ${lan1} | grep -Ev '#|payload:|DOMAIN-KEYWORD|IP-CIDR' | sed "s/DOMAIN-SUFFIX,/'+./g" | sed "s/DOMAIN,/'/g" | sed "s/$/'/g" | sed '/^\s*$/d' > ./tmp/temp-lan.yaml
          curl -sSL ${lan2} | grep -Ev '#|regexp:' | sed '/^\s*$/d' | sed '/^full:/!s/^/- '\'+.'/g' | sed "s/^full:/- '/g" | sed "s/$/'/g" | sed 's/^/  /g' >>  ./tmp/temp-lan.yaml
          sort --ignore-case -u ./tmp/temp-lan.yaml > ./tmp/lan.yaml
          echo "payload:" | cat - ./tmp/lan.yaml > ./publish/lan.yaml

      - name: Generate networktest
        run: |
          curl -sSL ${networktest} | grep 'DOMAIN' | grep -v '#' | sed 's/- DOMAIN-SUFFIX,//g' | sed 's/- DOMAIN-KEYWORD,/keyword:/g' | sed 's/- DOMAIN,/full:/g' | sed 's/^[[:space:]]*//g' | sed '/^\s*$/d' > ./community/mydata/networktest
          cat <<EOF >> ./community/mydata/networktest
          keyword:test-ipv6
          keyword:testipv6
          keyword:ipv6-test
          keyword:ipv6test
          EOF
          curl -sSL ${networktest} | grep -v '#' > ./publish/networktest.yaml
          cat <<EOF >> ./publish/networktest.yaml
            - DOMAIN-KEYWORD,test-ipv6
            - DOMAIN-KEYWORD,testipv6
            - DOMAIN-KEYWORD,ipv6-test
            - DOMAIN-KEYWORD,ipv6test
          EOF
          
      - name: Generate microsoft-cn
        run: |
          curl -sSL ${microsoft_cn} | grep -Ev '#|payload:' | sed 's/^- "+.//g' | sed 's/^- "/full:/g' | sed 's/"$//g' | sed '/^\s*$/d' > ./community/mydata/microsoft-cn
          curl -sSL ${microsoft_cn} | grep -Ev '#|payload:' | sed 's/"/'\''/g' | sed 's/^/  /g' | sed '1s/^/payload:\n/' | sed '/^\s*$/d' > ./publish/microsoft-cn.yaml

      - name: Generate apple-cn
        run: |
          curl -sSL ${apple_cn1} | grep -Ev '#|payload:' | sed 's/^- "+.//g' | sed 's/^- "/full:/g' | sed 's/"$//g' | sed '/^\s*$/d' > ./tmp/temp-apple-cn.txt
          curl -sSL ${apple_cn2} | sed 's/^server=\///g' | sed 's/\/.*//g' | sed '/^\s*$/d' >> ./tmp/temp-apple-cn.txt
          sort --ignore-case -u ./tmp/temp-apple-cn.txt > ./community/mydata/apple-cn
          curl -sSL ${apple_cn1} | grep -Ev '#|payload:' | sed 's/"/'\''/g' | sed 's/^/  /g' | sed '/^\s*$/d' > ./tmp/temp-apple-cn.yaml
          curl -sSL ${apple_cn2} | sed 's/server=\//- '\''/g' | sed 's/\/.*/\x27/' >> ./tmp/temp-apple-cn.yaml
          sort --ignore-case -u ./tmp/temp-apple-cn.yaml > ./tmp/apple-cn.yaml
          echo "payload:" | cat - ./tmp/apple-cn.yaml > ./publish/apple-cn.yaml

      - name: Generate google-cn
        run: |
          curl -sSL ${google_cn1} | grep -Ev '#|payload:|googleapis\.cn' | sed 's/^- "+.//g' | sed 's/^- "/full:/g' | sed 's/"$//g' | sed '/^\s*$/d' > ./tmp/temp-google-cn.txt
          curl -sSL ${google_cn2} | sed 's/^server=\///g' | sed 's/\/.*//g' | sed '/^\s*$/d' >> ./tmp/temp-google-cn.txt
          sort --ignore-case -u ./tmp/temp-google-cn.txt > ./community/mydata/google-cn
          curl -sSL ${google_cn1} | grep -Ev '#|payload:|googleapis\.cn' | sed 's/"/'\''/g' | sed 's/^/  /g' | sed '/^\s*$/d' > ./tmp/temp-google-cn.yaml
          curl -sSL ${google_cn2} | sed 's/server=\//- '\''/g' | sed 's/\/.*/\x27/' >> ./tmp/temp-google-cn.yaml
          sort --ignore-case -u ./tmp/temp-google-cn.yaml > ./tmp/google-cn.yaml
          echo "payload:" | cat - ./tmp/google-cn.yaml > ./publish/google-cn.yaml

      - name: Generate games-cn
        run: |
          curl -sSL ${games_cn1} | grep -Ev '#|payload:' | sed 's/^- "+.//g' | sed 's/^- "/full:/g' | sed 's/"$//g' | sed '/^\s*$/d' > ./tmp/temp-games-cn.txt
          curl -sSL ${games_cn2} | grep 'DOMAIN' | grep -v '#' | sed 's/- DOMAIN-SUFFIX,//g' | sed 's/- DOMAIN-KEYWORD,/keyword:/g' | sed 's/- DOMAIN,/full:/g' | sed 's/^[[:space:]]*//g' | sed '/^\s*$/d' >> ./tmp/temp-games-cn.txt
          sort --ignore-case -u ./tmp/temp-games-cn.txt > ./community/mydata/games-cn
          curl -sSL ${games_cn1} | grep -Ev '#|payload:' | sed 's/"/'\''/g' | sed 's/^/  /g' | sed '/^\s*$/d' > ./tmp/temp-games-cn.yaml
          curl -sSL ${games_cn2} | grep -Ev '#|payload:|DOMAIN-KEYWORD|IP-CIDR' | sed "s/DOMAIN-SUFFIX,/'+./g" | sed "s/DOMAIN,/'/g" | sed "s/$/'/g" | sed '/^\s*$/d' >> ./tmp/temp-games-cn.yaml
          sort --ignore-case -u ./tmp/temp-games-cn.yaml > ./tmp/games-cn.yaml
          echo "payload:" | cat - ./tmp/games-cn.yaml > ./publish/games-cn.yaml

      - name: Generate proxy
        run: |
          curl -sSL ${proxy1} | grep -Ev '#|payload:' | sed "s/- '+.//g" | sed "s/- '/full:/g" | sed "s/'$//g" | sed 's/^[[:space:]]*//g' | sed '/^\s*$/d' > ./tmp/temp-proxy.txt
          curl -sSL ${proxy2} | sed 's/^domain://g' | sed 's/:@!cn$//g' >> ./tmp/temp-proxy.txt
          cat <<EOF >> ./tmp/temp-proxy.txt
          googleapis.cn
          EOF
          sort --ignore-case -u ./tmp/temp-proxy.txt > ./community/mydata/proxy
          curl -sSL ${proxy1} | grep -Ev '#|payload:' > ./tmp/temp-proxy.yaml
          curl -sSL ${proxy2} | grep -Ev '#|regexp:' | sed '/^\s*$/d' | sed "/^domain:/- '+./g" | sed "s/^full:/- '/g" | sed 's/:@!cn$//g' | sed "s/$/'/g" | sed 's/^/  /g' >> ./tmp/temp-proxy.yaml
          cat <<EOF >> ./tmp/temp-proxy.yaml
            - '+.googleapis.cn'
          EOF
          sort --ignore-case -u ./tmp/temp-proxy.yaml > ./tmp/proxy.yaml
          echo "payload:" | cat - ./tmp/proxy.yaml > ./publish/proxy.yaml

      - name: Generate cn
        run: |
          curl -sSL ${cn1} | grep -Ev '#|payload:|google' | sed "s/- '+.//g" | sed "s/- '/full:/g" | sed "s/'$//g" | sed 's/^[[:space:]]*//g' | sed '/^\s*$/d' > ./tmp/temp-cn.txt
          curl -sSL ${cn2} | grep -Ev '#|payload:|google' | sed "s/- '+.//g" | sed "s/- '/full:/g" | sed "s/'$//g" | sed 's/^[[:space:]]*//g' | sed '/^\s*$/d' >> ./tmp/temp-cn.txt
          sort --ignore-case -u ./tmp/temp-cn.txt > ./community/mydata/cn
          curl -sSL ${cn1} | grep -Ev '#|payload:|google' > ./tmp/temp-cn.yaml
          curl -sSL ${cn2} | grep -Ev '#|payload:|google' >> ./tmp/temp-cn.yaml
          sort --ignore-case -u ./tmp/temp-cn.yaml > ./tmp/cn.yaml
          echo "payload:" | cat - ./tmp/cn.yaml > ./publish/cn.yaml

      - name: Generate geosite.dat
        run: |
          cd ./community
          go run ./ --datapath=./mydata --outputname geosite.dat

      - name: Generate geosite-lite.dat
        run: |
          rm -f ./community/mydata/ads
          cd ./community
          go run ./ --datapath=./mydata --outputname geosite-lite.dat

      - name: Get geoip.dat relative files
        run: |
          wget https://github.com/DustinWin/clash-geoip/releases/download/latest/geoip.dat

      - name: Generate fake-ip-user.yaml
        env:
          SED: sed 's/^/    - /' | sed '/^\s*$/d'
        run: |
          cat <<EOF > ./tmp/temp-fake-ip-user.txt
          unified-delay: false
          tcp-concurrent: true

          geodata-mode: true
          geox-url:
            geosite: "https://ghproxy.com/https://github.com/DustinWin/clash-geosite/releases/download/latest/geosite-lite.dat"
            geoip: "https://ghproxy.com/https://github.com/DustinWin/clash-geoip/releases/download/latest/geoip.dat"
            mmdb: "https://ghproxy.com/https://github.com/DustinWin/clash-geoip/releases/download/latest/Country.mmdb"

          global-client-fingerprint: chrome

          profile:
            store-selected: true
            store-fake-ip: true

          dns:
            enable: true
            prefer-h3: true
            ipv6: true
            listen: 0.0.0.0:1053
            use-hosts: true
            fake-ip-range: 198.18.0.1/16
            enhanced-mode: fake-ip
            fake-ip-filter:
          EOF
          curl -sSL https://raw.githubusercontent.com/juewuy/ShellClash/master/public/fake_ip_filter.list | grep -v "#" | sed "s/.*/'&'/" | ${{ env.SED }} >> ./tmp/temp-fake-ip-user.txt
          curl -sSL https://raw.githubusercontent.com/XIU2/TrackersListCollection/master/all.txt | grep -i '\.[A-Z]' | sed "s/^.*\/\//'/g" | sed "s/:.*\/.*/'/g" | ${{ env.SED }} >> ./tmp/temp-fake-ip-user.txt
          cat <<EOF >> ./tmp/temp-fake-ip-user.txt
              - 'static.adtidy.org'
              - 'adguardteam.github.io'
              - 'anti-ad.net'
            default-nameserver:
              - https://1.12.12.12/dns-query
              - https://223.5.5.5/dns-query
            nameserver:
              - https://doh.pub/dns-query
              - https://dns.alidns.com/dns-query
          EOF
          cat ./tmp/temp-fake-ip-user.txt > ./publish/fake-ip-user.yaml

      - name: Generate redir-host-user.yaml
        run: |
          cat <<EOF > ./publish/redir-host-user.yaml
          unified-delay: false
          tcp-concurrent: true

          geodata-mode: true
          geox-url:
            geosite: "https://ghproxy.com/https://github.com/DustinWin/clash-geosite/releases/download/latest/geosite-lite.dat"
            geoip: "https://ghproxy.com/https://github.com/DustinWin/clash-geoip/releases/download/latest/geoip.dat"
            mmdb: "https://ghproxy.com/https://github.com/DustinWin/clash-geoip/releases/download/latest/Country.mmdb"

          global-client-fingerprint: chrome

          profile:
            store-selected: true
            store-fake-ip: true

          dns:
            enable: true
            prefer-h3: true
            ipv6: true
            listen: 0.0.0.0:1053
            use-hosts: true
            fake-ip-range: 198.18.0.1/16
            enhanced-mode: fake-ip
            fake-ip-filter: ['+.*']
            default-nameserver:
              - https://1.12.12.12/dns-query
              - https://223.5.5.5/dns-query
            nameserver:
              - 'https://dns.google/dns-query#🪜 代理域名'
              - https://cloudflare-dns.com/dns-query
            proxy-server-nameserver:
              - https://doh.pub/dns-query
              - https://dns.alidns.com/dns-query
            nameserver-policy:
              'geosite:microsoft-cn,apple-cn,google-cn,games-cn': [https://doh.pub/dns-query, https://dns.alidns.com/dns-query]
              'geosite:cn,lan': [https://doh.pub/dns-query, https://dns.alidns.com/dns-query]
          EOF
          rm -rf ./tmp

      - name: Move files
        run: |
          wget https://github.com/DustinWin/clash-geoip/releases/download/latest/Country.mmdb -O ./publish/Country.mmdb
          install -Dp ./geoip.dat ./publish/
          install -Dp ./community/geosite.dat ./publish/
          install -Dp ./community/geosite-lite.dat ./publish/
          cd ./publish || exit 1

      - name: Release and upload assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: latest
          tag: latest
          file_glob: true
          file: ./publish/*

      - name: Git push assets to "release" branch
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Purge jsdelivr CDN
        run: |
          cd publish || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
